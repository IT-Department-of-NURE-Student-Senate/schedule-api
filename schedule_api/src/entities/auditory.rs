//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "auditory")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub name: String,
    pub building_id: i32,
    pub floor: i32,
    pub have_power: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::auditory_type_to_auditory::Entity")]
    AuditoryTypeToAuditory,
    #[sea_orm(
        belongs_to = "super::building::Entity",
        from = "Column::BuildingId",
        to = "super::building::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Building,
    #[sea_orm(has_many = "super::event::Entity")]
    Event,
}

impl Related<super::auditory_type_to_auditory::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuditoryTypeToAuditory.def()
    }
}

impl Related<super::building::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Building.def()
    }
}

impl Related<super::event::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Event.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
