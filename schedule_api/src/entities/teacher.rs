//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "teacher")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub full_name: String,
    pub short_name: String,
    pub department_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::department::Entity",
        from = "Column::DepartmentId",
        to = "super::department::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Department,
    #[sea_orm(has_many = "super::event_to_teacher::Entity")]
    EventToTeacher,
    #[sea_orm(has_many = "super::subject_to_teacher::Entity")]
    SubjectToTeacher,
}

impl Related<super::department::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Department.def()
    }
}

impl Related<super::event_to_teacher::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventToTeacher.def()
    }
}

impl Related<super::subject_to_teacher::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SubjectToTeacher.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
